#include <iostream>
#include <vector>
#include <cstring>
#include <assert.h>

#include "MatrixFunctions.hpp"
#include "Alignment.hpp"
#include "Alignment_V.hpp"
#include "AlignmentSettings.hpp"
#include "Alignment_D.hpp"

//this is a testing module for testing match D functions

using namespace std;
int main()
{
  
  //testing align with constraints fixed left remove right errors
  cout<<"%%%%%%%%testing alignment function 1 fixed left remove"<<endl;
  double error_cost=4;
  /*  string seq1="CAAGCCCCTTCATCAGGAACTGGTCCGTCGGGTCCCGGCGACACGGGGGTCTCCACGAGAACCTCCTCCCACGATCCCCCTTCTGGCTACCCGGGAACCACCTCCGACTCCTCTGCCACTGGCGCCAGGGAACCGGGGTCTGCAGGTATCGCATCATCGGTTTGGGACCCCATTGGGGAGGTTTTTAGCACTAGGGCCGACTCACCAGAGAGCGTGTCATTATGTGACGGCACAGGAGCCGAGCGGGGTACATGAGACGCAACTATGGTGACTAACGGGATATCAATGAGCAGACAGAGA";
  string seq2=    "GACTTCTCTGCCACTGGTAACAGGGAACCGGGGTCTGTAGTTTTCGTAGT";
  */
  /*  string seq1="GACTCCTCTGCCACTGGCGCCAGGGAACCGGGGTCTGCAGGTATCGCATCATC";
  string seq2="GACTCCTCTGTCACTGGTCCCACGGTGCCGGGGTCTCTAGCTTCATGGTCATC";
  */
  string seq1("AGAGACAGACGAGTAACTATAGGGCAATCAGTGGTATCAACGCAGAGTACATGGGGCGAGCCGAGGACACGGCAGTGTATTACTGTGCGAGAGACCACTCAGCCGGGATCACGATTTTTGGAGGGGTTACCCCAGGGTTTGGCTACTACGCTATGGACGTCTGGGGCCAAGGGACCGCGGTCACCGTCTCCTCAGCCTCCACCAAGGGCCCATCGGTCTTCCCCCTAGCACCCTCCTCCAAGAGCACCTCTGGGGGCACAGCGGCCCTGGGCTGCCTGGTCAAGGACTACTTCCCCGAAC");
  //string seq2("CAGGTGCAGCTACAGCAGTGGGGCGCAGGACTGTTGAAGCCTTCGGAGACCCTGTCCCTCACCTGCGCTGTCTATGGTGGGTCCTTCAGTGGTTACTACTGGTGCTGGATCCGCCAGCCCCTAGGGAAGGGGCTGGAGTGGATTGGGGAAATCAATCATAGTGGAAGCACCAACAACAACCCGTCCCTCAAGAGTCGAGCCACCATATCAGTAGACACGTCCAAGAACCAGTTCTCCCTGAAGCTGAGCTCTGTGACCGCCGCGGACACGGCTGTGTATTACTGTGCGAGAGG");
  //string seq2("GAGGTGCAGCTGGTGGAGTCTGGGGGAGGCTTGGTACAGCCTAGGGGGTCCCTGAGACTCTCCTGTGCAGCCTCTGGATTCACCGTCAGTAGCAATGAGATGAGCTGGATCCGCCAGGCTCCAGGGAAGGGGCTGGAGTGGGTCTCATCCATTAGTGGTGGTAGCACATACTACGCAGACTCCAGGAAGGGCAGATTCACCATCTCCAGAGACAATTCCAAGAACACGCTGTATCTTCAAATGAACAACCTGAGAGCTGAGGGCACGGCCGCGTATTACTGTGCCAGATATA");
  //string seq2("GAAGTGCAGCTGGTGGAGTCTGGGGGAGTCGTGGTACAGCCTGGGGGGTCCCTGAGACTCTCCTGTGCAGCCTCTGGATTCACCTTTGATGATTATGCCATGCACTGGGTCCGTCAAGCTCCGGGGAAGGGTCTGGAGTGGGTCTCTCTTATTAGTTGGGATGGTGGTAGCACCTACTATGCAGACTCTGTGAAGGGTCGATTCACCATCTCCAGAGACAACAGCAAAAACTCCCTGTATCTGCAAATGAACAGTCTGAGAGCTGAGGACACCGCCTTGTATTACTGTGCAAAAGATA");
  string seq2("GAAGTGCAGCTGGTGGAGTCTGGGGGAGTCGTGGTACAGCCTGGGGGGTCCCTGAGACTCTCCTGTGCAGCCTCTGGATTCACCTTTGATGATTATGCCATGCACTGGGTCCGTCAAGCTCCGGGGAAGGGTCTGGAGTGGGTCTCTCTTATTAGTTGGGATGGTGGTAGCACCTACTATGCAGACTCTGTGAAGGGTCGATTCACCATCTCCAGAGACAACAGCAAAAACTCCCTGTATCTGCAAATGAACAGTCTGAGAGCTGAGGACACCGCCTTGTATTACTGTGCAAAAGATA");
  unsigned maximum_errors=10;
  unsigned* error_positions=new unsigned [maximum_errors];

  cout<<"########start testing find errors"<<endl;

  unsigned n_errors=findErrors(seq1, seq2, 2,4, 0,2, 10,1, error_positions);

  
  cout<<"\tnumber of errors found is "<<n_errors<<endl;
  cout<<"\terror positions:"<<endl;
  cout<<"\t\t";
  for(unsigned i=0;i<maximum_errors;i++)
    {
      cout<<error_positions[i]<<",";
    }
  cout<<endl;

  //start doing the match D
  SequenceString ss_seq("seq", seq1);
  SequenceString ss_target("target", seq2);
  cout<<"+++++++++=======>testing Match_D()....."<<endl;
  //bool seq_ok=match_D(
//		      );
  unsigned alength=20;
  unsigned* align_positions=new unsigned[2];
  unsigned align_position_start;

  cout<<"#####################start doing the calculate score"<<endl;
  double score= CalculateScore
    (alength, NULL, 5,4);
  assert(score==alength-5*4);
  cout<<"score is correct"<<endl;
  
  
  //testing match V
  

  //clear the memory
  delete[] error_positions;
  delete[] align_positions;
  cout<<"!!!!!DONE!!!!!!"<<endl;
  
  return 0;
}
