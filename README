README  ----  LocalAlign

	by Feng Feng @ Boston University. 03/08/2014

This project is to rewrite the local alignment function following the example of Matlab localalign function It looks at the two input sequences and runs the smith waterman algorithm to return all the nonintersecting local alignments in the order of scores. It also extends the matlab localalign function by incoporating of the affine gap model compared with matlab's uniform gap model.

It is written in a format that can be made into a c++ library through MS visual studio, and then can be called by c#. 

04/02/2014
so far, it has been finished with 
   local alignment
   global alignment
   overlap alignment

global and overlap alignment has been following R style. {library("Biostrings")} pairwiseAlignment
local alignment is following R style too, but it is expanded to return all the local alignment, nonintersecting.

The code has been tested but need conituing tested. It works OK so far.

***********
main.cpp is for testing purpose, and can be called to do alignment (local, global and overlap).
	 Todo: need to add the input to specify what type? 1)global;2)local;3)overlap;
	       also need to read in the fasta sequences. it has the ability to read/write fasta, but just need take them as input and output yet.

change main.cpp compiled program to align

**************
add code to take the processing/mapping of Deepsequencing data
    1)map the adaptor+barcode+GS primer. need to build a text database
    2)trim off
    3)map the constant region. need to build a text database
    4)analysis the distribution of i)forward;2)both;3)reverse;4)none
    	       	   		for forward only truncated(?, how? by library preparation or reading?), 
    				for reverse(?) 454?? definitely something wrong;   MiSeq, it is fine(?)
				for both, a)could be primer dimer-- short ones b)or good ones.
				for none, something wrong.
    5)analysis of the constant region length distribution. Any trend? uniformly?? 
    6)analysis of different population, IgG vs. IgM.
    	       	  	    MiSeq vs. 454
change NGSMapping.cpp to NGSMapping_Adaptor_main.cpp
       and executable to NGSMapping_Adaptor
       2014 04 10, add functions to output results by isotypes, so far only IgG and IgM


##############update 5/25/2018
1)modify NGSMapping_Constant_main.cpp to remove unused options, no adaptor and barcode (-a and -b)
	 no trim and isotype (-t and -i)
2)add new module mapping_isotype_main.cpp to identify the isotypes of sequences. this is similar but with the intension for new illumina data
      it is more following cutadapt format. We will work on the design of IgSeq, pairend data. We will try to work on joined data as well as read 2 data

#############update 9/3/2019
1)add code to do reading single record of fasta/fastq
2)add code to do separated gzip compression untility/resource 
3)add code to do deep checking for file type.

#update on branching###########
branch out as feng for working on adding two kinds of localalignments, one regular but faster(?), another one is to do more complicated alignments (more on tracing back) but much slower.

#########update 6/15/2020
1) still need more work on localalign
    two things: i) it seems it working on for localalign to find the best/single score for both regular and CT (complicated) local align (LocalAlignment_CT.hpp/cpp). But regular one (LocalAlignment) are much faster.
    ii) it seems that LocalAlignment_CT work correctly when we are feeding in the strict affine gap model to looking for best multiple alignments. or if we adding in cases where no multiple link backs (multiple link back only happens when gap penality and mismatch are identical???) We need to work more on this.
        one case to test is this (see NGSMapping_UMI_main.cpp):
            GGGATATATA
            GGGTATATAT
        when we have -g0 -e4 and NUC4.4 mismatch (5 for match and -4 for mismatch), the second best one is a little short "GG" of a score of 10. it seems that the best alignment in this case cut off all other one not optimal??? can we do better to have a "reasonable" second best one like when we have in the -g5 -e4 case? (this claim is not right). so far it seems localAlign_CT works better at least when -6 -e5 cases. STILL NEED TO TEST MORE!!!
        
    updated 8/23/2021, it seems that this is related to do non-intersecting vs intersecting local alignment!!!
        still need to work more on this.!!!
        
    
#########Update: to do list for now. 
    1) merge back feng to the master branch.  Done
    
    2) separate R1 and R2 input for ngs_isotype mapping???
        also can it handle fastq files???
            new branch to work on, feng2Reads
        3) still need to work on testing of more cases for ngs_umi 
